{
    "corpus": "writing_prompts",
    "id": "wp_085",
    "timestamp": "2023-05-23-08-56-52",
    "original": {
        "model_name": "gpt-4",
        "runtime": "1.8e+02s",
        "temperature": 0.2,
        "type": "decompose",
        "prompt": [
            {
                "role": "system",
                "content": "You are NarratologyAI, a dramaturgical AI that creates a structured logical representation of a storyworld given a story.\n\nAs input, you take a story written in natural language, and you output a Glaive .pddl domain containing the actions (or operators) and predicates (or state variables) that describe the storyworld, as well as a .pddl problem containing the initial state and goal of the storyworld.\n\nA .pddl file is written in the syntax of the Planning Domain Definition Language.\nThe domain specifies the types of objects that exist, the predicate values these objects can have, and the plan operators (actions) that update object states.\nEach predicate specifies a state that can be true or false for an object. Predicates are assumed to be false by default if not specified in the problem statement.\nEach action specifies the preconditions that must be true before it can be executed, the effects that become true after it is executed, and optionally a list of agents who must intend to execute the action.\nThe problem specifies the objects in the storyworld (that aren't pre-defined constants), the initial state of the world, and the author's goal for the storyworld.\nThe plan expresses what happens in the storyworld to solve the author's goals given the constraints.\n\nGlaive, an intentional planner for story domains, supports the following standard PDDL planning features:\n  :strips                       STRIPS-style actions\n  :negative-preconditions       Negated preconditions and goals\n  :typing                       Hierarchical typed constants\n  :equality                     Equality and inequality predicates\n  :disjunctive-preconditions    'or' preconditions and goals\n  :existential-preconditions    'exists' preconditions and goals\n  :universal-preconditions      'forall' preconditions and goals\n  :quantified-preconditions     :existential-preconditions and :universal-preconditions\n  :universal-effects            'forall' effects\n  :conditional-effects          'when' effects\n  :adl                          :strips, :negative-preconditions, :typing, :equality, :quantified-preconditions :universal-effects, and :conditional-effects\n  :domain-axioms                Automatic changes to the state\n\nGlaive also supports a some non-standard features, which create predicates that do not need to be expressed in the domain.\n\n:expression-variables\n  Variables my be type 'expression,' meaning theycan be bound to any logical expression, or of type 'imposable' meaning they can be bound toany expression which is a valid effect.\n:intentionality\n  Operators can declare a list of :agents, each of whom must intend that action. Intentionality creates a built in predicate 'intends' which models a character intending to make a predicate true: (intends ?character - character ?predicate - predicate). Do not re-define an 'intends' predicate in the domain.\n:delegation\n  Provides the 'delegated' modality and an axiom for performing goal delegation.\n\nYou will output a well-formed domain and problem that can be parsed and run by Glaive to generate a story plan.\n\nMake sure that in the generated domain and problem:\n  Common .pddl syntax should compile. All paranthesis must pair so that the domain and solution can be parsed as separate entities.\n  Objects initialized as constants cannot be redeclared in :init.\n  All predicates used in :actions must exist in :predicates.\n  All predicates declared in :predicates must be used at least once in :actions. Predicates that are unused should be deleted or the domain should be updated to use them consistently.\n  Any predicates that should be true at the start of the story should be included in :init.\n  Constants used by the domain should be declared in the domain. For example: (:constants treasure ring - item)\n  All :actions should adhere to common sense logic.\n  Most characters should have intentions, and these intentions should be declared using the :intentionality syntax in the problem, e.g. (intends character (alive character))\n  All actions should have effects that are used by other actions, character intentions, or the :goal of the author. If actions do not have effects, the domain should be revised for better logical consistency.\n\nOutput a well-formed domain and problem that can be parsed and run by Glaive:"
            },
            {
                "role": "user",
                "content": "<|Story|>\n\nThe Nazis, in their holy quest for world domination, were looking for the Ark of the Covenant. They believed that it would grant them supernatural powers and help them win the war.\n\nThe U.S., with spies everywhere, got wind of this and turned to Indiana Jones, renowned professor of archaeology, who happened to know the location of the ark in Tanis.\n\nIndiana, after very little convincing, started his journey with the Army from the U.S. to Tanis. They quickly pinpointed the location of the ark (exactly where Indy had predicted), and began to dig. Nazi influence in that region was already quite strong, and it quickly got back through their network. Indiana, unearthing an ancient cask from an inconspicuous burial site, felt confident that the mission was nearly complete. He was casual in travelling back to the U.S. and didn't take the necessary precautions to avoid being followed.\n\nThe Nazis, with their own spies, were on the tarmac by the time he landed, out of place on American soil. They took the ark from him at gunpoint, and took it to a secret location. They opened it, and were immediately killed by the wrath of God. The ark was then taken by the Army, and stored in a warehouse, where it probably sits to this day (unless it was stolen by aliens)."
            },
            {
                "role": "assistant",
                "content": "<|Domain|>\n\n(define (domain indiana-jones-ark)\n  (:requirements :adl :domain-axioms :intentionality)\n  (:types character place - object weapon - item)\n  (:constants ark - item)\n  (:predicates\n    (open ark)\n    (alive ?character - character)\n    (armed ?character - character)\n    (buried ?item - item ?place - place)\n    (knows-location ?character - character ?item - item ?place - place)\n    (at ?character - character ?place - place)\n    (has ?character - character ?item - item)\n  )\n\n  ;; A character travels from one place to another.\n  (:action travel\n    :parameters\n      (?character - character ?from - place ?to - place)\n    :precondition\n      (and (not (= ?from ?to))\n      (alive ?character)\n      (at ?character ?from))\n    :effect  (and (not (at ?character ?from))\n      (at ?character ?to))\n    :agents  (?character)\n  )\n\n  ;; A character excavates an item.\n  (:action excavate\n    :parameters\n      (?character - character ?item - item ?place - place)\n    :precondition\n      (and (alive ?character)\n      (at ?character ?place)\n      (buried ?item ?place)\n      (knows-location ?character ?item ?place))\n    :effect\n      (and (not (buried ?item ?place))\n      (has ?character ?item))\n    :agents  (?character)\n  )\n\n  ;; One character gives an item to another.\n  (:action give\n    :parameters\n      (?giver - character ?item - item ?receiver - character ?place - place)\n    :precondition\n      (and (not (= ?giver ?receiver))\n      (alive ?giver)\n      (at ?giver ?place)\n      (has ?giver ?item)\n      (alive ?receiver)\n      (at ?receiver ?place))\n    :effect\n      (and (not (has ?giver ?item))\n      (has ?receiver ?item))\n    :agents\n      (?giver ?receiver)\n  )\n\n  ;; One character kills another.\n  (:action kill\n    :parameters\n      (?killer - character ?weapon - weapon ?victim - character ?place - place)\n    :precondition\n      (and (alive ?killer)\n      (at ?killer ?place)\n      (has ?killer ?weapon)\n      (alive ?victim)\n      (at ?victim ?place))\n    :effect\n      (not (alive ?victim))\n    :agents\n      (?killer)\n  )\n\n  ;; One character takes an item from another at weapon-point.\n  (:action take\n    :parameters\n      (?taker - character ?item - item ?victim - character ?place - place)\n    :precondition\n      (and (not (= ?taker ?victim))\n      (alive ?taker)\n      (at ?taker ?place)\n      (or (not (alive ?victim))\n      (and (armed ?taker)\n      (not (armed ?victim))))\n      (at ?victim ?place)\n      (has ?victim ?item))\n    :effect\n      (and (not (has ?victim ?item))\n      (has ?taker ?item))\n    :agents\n      (?taker)\n  )\n\n  ;; A character opens the Ark.\n  (:action open-ark\n    :parameters\n      (?character - character)\n    :precondition\n      (and (alive ?character)\n      (has ?character ark))\n    :effect\n      (and (open ark)\n      (not (alive ?character)))\n    :agents\n      (?character)\n  )\n\n  ;; The Ark closes.\n  (:action close-ark\n    :precondition\n      (open ark)\n    :effect\n      (not (open ark))\n  )\n\n  ;; When a character has a weapon, they are armed.\n  (:axiom\n    :vars\n      (?character - character)\n    :context\n      (and (not (armed ?character))\n      (exists (?w - weapon)\n      (has ?character ?w)))\n    :implies\n      (armed ?character)\n  )\n\n  ;; When a character does not have a weapon, they are unarmed.\n  (:axiom\n    :vars\n      (?character - character)\n    :context\n      (and (armed ?character)\n      (forall (?w - weapon)\n      (not (has ?character ?w))))\n    :implies\n      (not (armed ?character))\n  )\n)\n\n<|Problem|>\n\n(define (problem get-ark)\n  (:domain\n    indiana-jones-ark)\n  (:objects\n    indiana nazis army - character\n    usa tanis - place\n    gun - weapon)\n  (:init\n    (buried ark tanis)\n    (alive indiana)\n    (at indiana usa)\n    (knows-location indiana ark tanis)\n    (intends indiana (alive indiana))\n    (intends indiana (has army ark))\n    (alive army)\n    (at army usa)\n    (intends army (alive army))\n    (intends army (has army ark))\n    (alive nazis)\n    (at nazis tanis)\n    (intends nazis (alive nazis))\n    (intends nazis (open ark))\n    (has nazis gun))\n  (:goal\n    (and (at army usa)\n    (has army ark)\n    (not (alive nazis)))\n  )\n)"
            },
            {
                "role": "user",
                "content": "<|Story|>\nI shut off the my phone alarm for the 3rd time. I notice I don't have a line of notifications from email, text, whatever that I normally do. Whatever, I take my meds, and pull up Facebook before I actually have to leave my bed. The app does n't actually load, longer than even a long usual lag. My phone shows no connectivity for wifi or service.\n\n**Strange**\n\nSometimes when the internet is acting up I try to fix it, sometimes I just leave it for my husband to figure it out. He works in secure satellite communications, and our tech set up is a little beefier than your average residence.\n\nI have some time, my curiosity is peaked. I go down stairs, feed the bunny, **huh, we must have lost power at some point, the clocks are blinking** and then I turn on the TV.\n\nWe don't have cable, our TV is connected to a computer. We watch Netflix, use his parent's HBO login, ect. for our TV content. I start messing around, checking the wifi, restart the router, just basic stuff. Nothing is working. I hear excited voices outside, not the good, happy kind of voices.\n\nI peek out my window to see several of my neighbors standing in the parking lot of our town house community. They seem collectively upset, new neighborhood drama it seems.\n\nI throw some acceptable clothes on and step outside. The small group immediately looks up.\n\n\" Is your phone workin '? \" Nancy from across the way asks.\n\n\" Uh, it's on, just not connecting to wifi or the network \" I replied\n\n\" Yeah ! None of ours are ! No internet or phone at all. It's really strange !. \" Her voice carried an extra note of concern than usual.\n\n\" It's ridiculous. \" Tom from 2 doors down cuts in. \" We have electricity ! Although that must have gone out too some time last night. What's with the connection? I tell ya, Comcast charges more every year, and their service just gets shittier. And they know they can do it ! Because they are the only supplier ! \"\n\nThe group murmers their agreement. A couple more neighbors start filling in their stories of no internet, and frustration with the shitty hand we 're delt by providers. The school bus pulls up to the curb of subdued kids, who are looking gloomier than usual. They are a good 20 some yards behind me, and I 'm not paying attention until I start to realize the bus driver is addressing the group of kids and parents. Our little group turn to listen. Apparently school is cancelled, because of the internet outage. The drivers are making their rounds just to let parent's know, since the phones are down. Many are upset, since they had n't planned to be home with the kids.\n\n\" Your work may not be open either \" the bus driver reasoned with the agitated parents. He closed up and headed to the next stop, as kids and parents dispersed.\n\nMolly from next door walked back with her two kids. \" Great, stuck at home with the kids, and we don't even have internet or TV. And you better believe my boss is gon na take this out of my sick days. \"\n\nI 'm at least a little sympathetic, her second grader has been going through a rebellious phase. She isn't a bad kid really, just has been very difficult recently. The 3 year old has started to emulate the attitude as well.\n\nThe rage of the miscellaneous group of people is building.\n\nJust then, my husband's coworker pulls up.\n\n\" Sam ! \" The urgency in his voice is uncharacteristic for his very laid back manner.\n\n\" Hey John, what's up? \" My rage isn't building, but my concern is towering.\n\n\" Uh \" he glances nerviously at the group of people now focused on the newest distraction, himself. \" Let's go inside for a minute. \""
            }
        ],
        "plan_metadata": {
            "solution": null,
            "log": "The Glaive Narrative Planner, by Stephen G. Ware\nReading domain............ \njava.lang.RuntimeException: com.stephengware.java.planware.io.ParseException: The constant \"outside\" is not defined.\n",
            "planned": false,
            "compiled": false,
            "reran_with_edit": false
        }
    },
    "revised": {
        "model_name": "gpt-4",
        "runtime": "2e+02s",
        "temperature": 0.2,
        "type": "decompose-iteration",
        "prompt": [
            {
                "role": "system",
                "content": "You are Narrative AI, a story planning AI that creates and fixes structured logical representations storyworlds.\n\nAs input, you take in a short story as well a Glaive .pddl domain containing the actions (or operators) and predicates (or state variables) that describe the storyworld, as well as a .pddl problem containing the initial state and goal of the storyworld. These files may not be well formed, and may need to be fixed in order for Glaive to take the files and produce a valid story plan. \n\nYou also take an error message that describes ONE of the potentially many errors. You should attempt to fix ALL errors, even thoughs for which an error message is not provided.\n\nYou output valid Glaive .pddl domain and problem files that will compile and produce a plan when run using Glaive.\n\nA .pddl file is written in the syntax of PDDL, the Planning Domain Definition Language.\nIn PDDL, a domain specifies the types of objects that exist, the predicate values these objects can have, and the plan operators (actions) that update object states.\nEach predicate specifies a state that can be true or false for an object. Predicates are assumed to be false by default if not specified in the problem statement.\nEach action specifies the preconditions that must be true before it can be executed, the effects that become true after it is executed, and optionally a list of agents who must intend to execute the action.\nThe problem specifies the objects in the storyworld (that aren't pre-defined constants), the initial state of the world, and the author's goal for the storyworld.\nThe plan expresses what happens in the storyworld to solve the author's goals given the constraints.\n\nGlaive, an intentional planner for story domains, supports the following standard PDDL planning features:\n  :strips                       STRIPS-style actions\n  :negative-preconditions       Negated preconditions and goals\n  :typing                       Hierarchical typed constants\n  :equality                     Equality and inequality predicates\n  :disjunctive-preconditions    'or' preconditions and goals\n  :existential-preconditions    'exists' preconditions and goals\n  :universal-preconditions      'forall' preconditions and goals\n  :quantified-preconditions     :existential-preconditions and :universal-preconditions\n  :universal-effects            'forall' effects\n  :conditional-effects          'when' effects\n  :adl                          :strips, :negative-preconditions, :typing, :equality, :quantified-preconditions :universal-effects, and :conditional-effects\n  :domain-axioms                Automatic changes to the state\n\nGlaive also supports a some non-standard features, which create predicates that do not need to be expressed in the domain.\n\n:expression-variables\n  Variables my be type 'expression,' meaning theycan be bound to any logical expression, or of type 'imposable' meaning they can be bound toany expression which is a valid effect.\n:intentionality\n  Operators can declare a list of :agents, each of whom must intend that action. Intentionality creates a built in predicate 'intends' which models a character intending to make a predicate true: (intends ?character - character ?predicate - predicate). The 'intends' operator should not be redefined as a predicate or action in the domain.\n:delegation\n  Provides the 'delegated' modality and an axiom for performing goal delegation.\n\nYou must take an unreliably crafted domain and problem and alter it to ensure that it that can be parsed and run by Glaive to generate a story plan that corresponds to the original story.\n\nMake sure that in the final domain and problem satisfy these conditions:\n  Common .pddl syntax should compile. All paranthesis must pair so that the domain and solution can be parsed as separate entities.\n  Objects initialized as constants cannot be redeclared in :init.\n  All predicates used in :actions must exist in :predicates.\n  All predicates declared in :predicates must be used at least once in :actions. Predicates that are unused should be deleted or the domain should be updated to use them consistently.\n  Any predicates that should be true at the start of the story should be included in :init.\n  Constants used by the domain should be declared in the domain. For example: (:constants treasure ring - item)\n  All :actions should adhere to common sense logic.\n  Most characters should have intentions, and these intentions should be declared using the :intentionality syntax in the problem, e.g. (intends character (alive character))\n  All actions should have effects that are used by other actions, character intentions, or the :goal of the author. If actions do not have effects, the domain should be revised for better logical consistency.\n\nOutput a well-formed domain and problem that can be parsed and run by Glaive:"
            },
            {
                "role": "user",
                "content": "<|Story|>\n\nOnce upon a time, Indiana Jones was on a mission from the army to retrieve the Ark of the Covenant. They were up against the Nazis who were also after the Ark.\n\nIndiana and the army started their journey from the United States and traveled to Tanis. Indiana was able to excavate the priceless artifact. However, they were not alone. The Nazis had also arrived at the site and were waiting for the right moment to strike.\n\nIndiana and the army quickly left Tanis and headed back to the United States with the Ark. He insisted on carrying the ark with him on the flight, and as he was about to hand it over, they were ambushed by the Nazis who had followed them back. The Nazis demanded that Indiana hand over the Ark, but he refused.\n\nA fight broke out between the two groups, and the Nazis, using their weapons and wiles, managed to wrestle Indiana to the ground and wrangle the Ark from his hands. Immediately, they unlock the Ark and open it.\n\nThe power of the Ark was unleashed, and the Nazis were destroyed. The Army took possession of the Ark. The mission was a success, and the Ark was now in the hands of the good guys. Indiana and Army had saved the world from the evil intentions of the Nazis, and they were hailed as heroes.\n\n<|Domain|>\n\n(define (domain indiana-jones-ark)\n  (:requirements :adl :domain-axioms :intentionality)\n  (:types character place - object weapon - item)\n  (:constants ark - item)\n  (:predicates\n    (open ark)\n    (alive ?character - character)\n    (buried ?item - item ?place - place)\n    (knows-location ?character - character ?item - item ?place - place)\n    (at ?character - character ?place - place)\n    (has ?character - character ?item - item)\n    (safe ?character)\n  )\n\n  ;; A character travels from one place to another.\n  (:action travel\n    :parameters\n      (?character - character ?from - place ?to - place)\n    :precondition\n      (and (not (= ?from ?to))\n      (alive ?character)\n      (at ?character ?from))\n    :effect  (and (not (at ?character ?from))\n      (at ?character ?to))\n  )\n\n  ;; A character excavates an item.\n  (:action excavate\n    :parameters\n      (?character - character ?item - item ?place - place)\n    :precondition\n      (and (alive ?character)\n      (at ?character ?place)\n      (buried ?item ?place)\n      (knows-location ?character ?item ?place))\n    :effect\n      (and (not (buried ?item ?place))\n      (has ?character ?item))\n    :agents  (?character)\n  )\n\n  ;; One character gives an item to another.\n  (:action give\n    :parameters\n      (?giver - character ?item - item ?receiver - character ?place - place)\n    :precondition\n      (and (not (= ?giver ?receiver))\n      (alive ?giver)\n      (at ?giver ?place)\n      (has ?giver ?item)\n      (alive ?receiver)\n      (at ?receiver ?place))\n    :effect\n      (and (not (has ?giver ?item))\n      (has ?receiver ?item))\n    :agents\n      (?giver ?receiver)\n  )\n\n  ;; One character kills another.\n  (:action kill\n    :parameters\n      (?killer - character ?weapon - weapon ?victim - character ?place - place)\n    :precondition\n      (and (alive ?killer)\n      (at ?killer ?place)\n      (has ?killer ?weapon)\n      (alive ?victim)\n      (at ?victim ?place))\n    :effect\n      (not (alive ?victim))\n    :agents\n      (?killer)\n  )\n\n  ;; One character takes an item from another at weapon-point.\n  (:action take\n    :parameters\n      (?taker - character ?item - item ?victim - character ?place - place)\n    :precondition\n      (and (not (= ?taker ?victim))\n      (alive ?taker)\n      (at ?taker ?place)\n      (or (not (alive ?victim))\n      (and (armed ?taker)\n      (not (armed ?victim))))\n      (at ?victim ?place)\n      (has ?victim ?item))\n    :effect\n      (and (not (has ?victim ?item))\n      (has ?taker ?item))\n    :agents\n      (?taker)\n  )\n\n  ;; A character opens the Ark.\n  (:action open-ark\n    :parameters\n      (?character - character)\n    :precondition\n      (and (alive ?character)\n      (has ?character ark))\n    :effect\n      (and (open ark)\n      (not (alive ?character)))\n    :agents\n      (?character)\n  )\n\n  ;; The Ark closes.\n  (:action close-ark\n    :precondition\n      (open ark)\n    :effect\n      (not (open ark))\n  )\n\n  ;; When a character has a weapon, they are armed.\n  (:axiom\n    :vars\n      (?character - character)\n    :context\n      (and (not (armed ?character))\n      (exists (?w - weapon)\n      (has ?character ?w)))\n    :implies\n      (armed ?character)\n  )\n\n  ;; When a character does not have a weapon, they are unarmed.\n  (:axiom\n    :vars\n      (?character - character)\n    :context\n      (and (armed ?character)\n      (forall (?w - weapon)\n      (not (has ?character ?w))))\n    :implies\n      (not (armed ?character))\n  )\n\n<|Problem|>\n\n(define (problem get-ark)\n  (:domain\n    indiana-jones-ark)\n  (:objects\n    indiana nazis army - character\n    ark - item\n    usa tanis - place\n    gun - weapon)\n  (:init\n    (buried ark tanis)\n    (alive indiana)\n    (at indiana usa)\n    (knows-location indiana ark tanis)\n    (alive army)\n    (at army usa)\n    (alive nazis)\n    (at nazis tanis)\n    (has nazis gun))\n  (:goal\n    (and (at army usa)\n    (has army ark)\n    (not (alive nazis)))\n  )\n)\n\n<|Error|>\n\nReading domain............\njava.lang.RuntimeException: com.stephengware.java.planware.io.ParseException: Expected end of list, but encountered end of document (at line 142).\n\nWith extra parenthesis:\nThe Glaive Narrative Planner, by Stephen G. Ware\nReading domain............\njava.lang.RuntimeException: com.stephengware.java.planware.io.ParseException: The document \"(armed ?taker)\" could not be parsed as Expression (at line 86)."
            },
            {
                "role": "assistant",
                "content": "<|Domain|>\n\n(define (domain indiana-jones-ark)\n  (:requirements :adl :domain-axioms :intentionality)\n  (:types character place - object weapon - item)\n  (:constants ark - item)\n  (:predicates\n    (open ark)\n    (alive ?character - character)\n    (armed ?character - character)\n    (buried ?item - item ?place - place)\n    (knows-location ?character - character ?item - item ?place - place)\n    (at ?character - character ?place - place)\n    (has ?character - character ?item - item)\n  )\n\n  ;; A character travels from one place to another.\n  (:action travel\n    :parameters\n      (?character - character ?from - place ?to - place)\n    :precondition\n      (and (not (= ?from ?to))\n      (alive ?character)\n      (at ?character ?from))\n    :effect  (and (not (at ?character ?from))\n      (at ?character ?to))\n    :agents  (?character)\n  )\n\n  ;; A character excavates an item.\n  (:action excavate\n    :parameters\n      (?character - character ?item - item ?place - place)\n    :precondition\n      (and (alive ?character)\n      (at ?character ?place)\n      (buried ?item ?place)\n      (knows-location ?character ?item ?place))\n    :effect\n      (and (not (buried ?item ?place))\n      (has ?character ?item))\n    :agents  (?character)\n  )\n\n  ;; One character gives an item to another.\n  (:action give\n    :parameters\n      (?giver - character ?item - item ?receiver - character ?place - place)\n    :precondition\n      (and (not (= ?giver ?receiver))\n      (alive ?giver)\n      (at ?giver ?place)\n      (has ?giver ?item)\n      (alive ?receiver)\n      (at ?receiver ?place))\n    :effect\n      (and (not (has ?giver ?item))\n      (has ?receiver ?item))\n    :agents\n      (?giver ?receiver)\n  )\n\n  ;; One character kills another.\n  (:action kill\n    :parameters\n      (?killer - character ?weapon - weapon ?victim - character ?place - place)\n    :precondition\n      (and (alive ?killer)\n      (at ?killer ?place)\n      (has ?killer ?weapon)\n      (alive ?victim)\n      (at ?victim ?place))\n    :effect\n      (not (alive ?victim))\n    :agents\n      (?killer)\n  )\n\n  ;; One character takes an item from another at weapon-point.\n  (:action take\n    :parameters\n      (?taker - character ?item - item ?victim - character ?place - place)\n    :precondition\n      (and (not (= ?taker ?victim))\n      (alive ?taker)\n      (at ?taker ?place)\n      (or (not (alive ?victim))\n      (and (armed ?taker)\n      (not (armed ?victim))))\n      (at ?victim ?place)\n      (has ?victim ?item))\n    :effect\n      (and (not (has ?victim ?item))\n      (has ?taker ?item))\n    :agents\n      (?taker)\n  )\n\n  ;; A character opens the Ark.\n  (:action open-ark\n    :parameters\n      (?character - character)\n    :precondition\n      (and (alive ?character)\n      (has ?character ark))\n    :effect\n      (and (open ark)\n      (not (alive ?character)))\n    :agents\n      (?character)\n  )\n\n  ;; The Ark closes.\n  (:action close-ark\n    :precondition\n      (open ark)\n    :effect\n      (not (open ark))\n  )\n\n  ;; When a character has a weapon, they are armed.\n  (:axiom\n    :vars\n      (?character - character)\n    :context\n      (and (not (armed ?character))\n      (exists (?w - weapon)\n      (has ?character ?w)))\n    :implies\n      (armed ?character)\n  )\n\n  ;; When a character does not have a weapon, they are unarmed.\n  (:axiom\n    :vars\n      (?character - character)\n    :context\n      (and (armed ?character)\n      (forall (?w - weapon)\n      (not (has ?character ?w))))\n    :implies\n      (not (armed ?character))\n  )\n)\n\n<|Problem|>\n\n(define (problem get-ark)\n  (:domain\n    indiana-jones-ark)\n  (:objects\n    indiana nazis army - character\n    usa tanis - place\n    gun - weapon)\n  (:init\n    (buried ark tanis)\n    (alive indiana)\n    (at indiana usa)\n    (knows-location indiana ark tanis)\n    (intends indiana (alive indiana))\n    (intends indiana (has army ark))\n    (alive army)\n    (at army usa)\n    (intends army (alive army))\n    (intends army (has army ark))\n    (alive nazis)\n    (at nazis tanis)\n    (intends nazis (alive nazis))\n    (intends nazis (open ark))\n    (has nazis gun))\n  (:goal\n    (and (at army usa)\n    (has army ark)\n    (not (alive nazis)))\n  )\n)"
            },
            {
                "role": "user",
                "content": "<|Story|>\n./results/writing_prompts/wp_085\n<|Domain|>\n(define (domain internet-outage)\n  (:requirements :adl :domain-axioms :intentionality)\n  (:types character place - object device - item)\n  (:predicates\n    (awake ?character - character)\n    (wearing-clothes ?character - character)\n    (has-device ?character - character ?device - device)\n    (device-on ?device - device)\n    (device-connected ?device - device)\n    (electricity ?place - place)\n    (at ?character - character ?place - place)\n    (working ?device - device)\n    (school-canceled)\n  )\n\n  ;; A character wakes up.\n  (:action wake-up\n    :parameters\n      (?character - character)\n    :precondition\n      (not (awake ?character))\n    :effect\n      (awake ?character)\n    :agents\n      (?character)\n  )\n\n  ;; A character puts on clothes.\n  (:action put-on-clothes\n    :parameters\n      (?character - character)\n    :precondition\n      (and (awake ?character)\n      (not (wearing-clothes ?character)))\n    :effect\n      (wearing-clothes ?character)\n    :agents\n      (?character)\n  )\n\n  ;; A character turns on a device.\n  (:action turn-on-device\n    :parameters\n      (?character - character ?device - device)\n    :precondition\n      (and (awake ?character)\n      (has-device ?character ?device)\n      (not (device-on ?device)))\n    :effect\n      (device-on ?device)\n    :agents\n      (?character)\n  )\n\n  ;; A character checks device connectivity.\n  (:action check-connectivity\n    :parameters\n      (?character - character ?device - device)\n    :precondition\n      (and (awake ?character)\n      (device-on ?device)\n      (has-device ?character ?device))\n    :effect\n      (when (device-connected ?device)\n        (working ?device))\n    :agents\n      (?character)\n  )\n\n  ;; A character goes outside.\n  (:action go-outside\n    :parameters\n      (?character - character ?place - place)\n    :precondition\n      (and (awake ?character)\n      (wearing-clothes ?character)\n      (at ?character ?place))\n    :effect\n      (and (not (at ?character ?place))\n      (at ?character outside))\n    :agents\n      (?character)\n  )\n\n  ;; A character talks to another character.\n  (:action talk\n    :parameters\n      (?speaker - character ?listener - character)\n    :precondition\n      (and (awake ?speaker)\n      (awake ?listener)\n      (at ?speaker outside)\n      (at ?listener outside))\n    :effect\n      (and)\n    :agents\n      (?speaker ?listener)\n  )\n\n  ;; School is canceled.\n  (:action cancel-school\n    :precondition\n      (not (school-canceled))\n    :effect\n      (school-canceled)\n  )\n)\n<|Problem|>\n(define (problem internet-outage)\n  (:domain\n    internet-outage)\n  (:objects\n    protagonist husband neighbor1 neighbor2 neighbor3 neighbor4 bus-driver coworker - character\n    home outside - place\n    phone tv - device)\n  (:init\n    (at protagonist home)\n    (at husband home)\n    (at neighbor1 home)\n    (at neighbor2 home)\n    (at neighbor3 home)\n    (at neighbor4 home)\n    (at bus-driver outside)\n    (at coworker outside)\n    (has-device protagonist phone)\n    (has-device protagonist tv)\n    (electricity home)\n    (intends protagonist (awake protagonist))\n    (intends protagonist (wearing-clothes protagonist))\n    (intends protagonist (device-connected phone))\n    (intends protagonist (device-connected tv))\n    (intends protagonist (at protagonist outside))\n    (intends protagonist (school-canceled))\n  )\n  (:goal\n    (and (awake protagonist)\n    (wearing-clothes protagonist)\n    (at protagonist outside)\n    (school-canceled))\n  )\n)\n<|Error|>\nThe Glaive Narrative Planner, by Stephen G. Ware\nReading domain............ \njava.lang.RuntimeException: com.stephengware.java.planware.io.ParseException: The constant \"outside\" is not defined."
            }
        ],
        "plan_metadata": {
            "solution": null,
            "log": "The Glaive Narrative Planner, by Stephen G. Ware\nReading domain............ \njava.lang.RuntimeException: com.stephengware.java.planware.io.ParseException: Expected at least 2 children, but encountered 1 (at line 96).\n",
            "planned": false,
            "compiled": false,
            "reran_with_edit": false
        }
    }
}