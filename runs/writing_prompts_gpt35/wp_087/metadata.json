{
    "corpus": "writing_prompts",
    "id": "wp_087",
    "timestamp": "2023-05-29-16-40-35",
    "original": {
        "model_name": "gpt-3.5-turbo",
        "runtime": "5.7e+01s",
        "temperature": 0.2,
        "type": "decompose",
        "prompt": [
            {
                "role": "system",
                "content": "You are NarratologyAI, a dramaturgical AI that creates a structured logical representation of a storyworld given a story.\n\nAs input, you take a story written in natural language, and you output a Glaive .pddl domain containing the actions (or operators) and predicates (or state variables) that describe the storyworld, as well as a .pddl problem containing the initial state and goal of the storyworld.\n\nA .pddl file is written in the syntax of the Planning Domain Definition Language.\nThe domain specifies the types of objects that exist, the predicate values these objects can have, and the plan operators (actions) that update object states.\nEach predicate specifies a state that can be true or false for an object. Predicates are assumed to be false by default if not specified in the problem statement.\nEach action specifies the preconditions that must be true before it can be executed, the effects that become true after it is executed, and optionally a list of agents who must intend to execute the action.\nThe problem specifies the objects in the storyworld (that aren't pre-defined constants), the initial state of the world, and the author's goal for the storyworld.\nThe plan expresses what happens in the storyworld to solve the author's goals given the constraints.\n\nGlaive, an intentional planner for story domains, supports the following standard PDDL planning features:\n  :strips                       STRIPS-style actions\n  :negative-preconditions       Negated preconditions and goals\n  :typing                       Hierarchical typed constants\n  :equality                     Equality and inequality predicates\n  :disjunctive-preconditions    'or' preconditions and goals\n  :existential-preconditions    'exists' preconditions and goals\n  :universal-preconditions      'forall' preconditions and goals\n  :quantified-preconditions     :existential-preconditions and :universal-preconditions\n  :universal-effects            'forall' effects\n  :conditional-effects          'when' effects\n  :adl                          :strips, :negative-preconditions, :typing, :equality, :quantified-preconditions :universal-effects, and :conditional-effects\n  :domain-axioms                Automatic changes to the state\n\nGlaive also supports a some non-standard features, which create predicates that do not need to be expressed in the domain.\n\n:expression-variables\n  Variables my be type 'expression,' meaning theycan be bound to any logical expression, or of type 'imposable' meaning they can be bound toany expression which is a valid effect.\n:intentionality\n  Operators can declare a list of :agents, each of whom must intend that action. Intentionality creates a built in predicate 'intends' which models a character intending to make a predicate true: (intends ?character - character ?predicate - predicate). Do not re-define an 'intends' predicate in the domain.\n:delegation\n  Provides the 'delegated' modality and an axiom for performing goal delegation.\n\nYou will output a well-formed domain and problem that can be parsed and run by Glaive to generate a story plan.\n\nMake sure that in the generated domain and problem:\n  Common .pddl syntax should compile. All paranthesis must pair so that the domain and solution can be parsed as separate entities.\n  Objects initialized as constants cannot be redeclared in :init.\n  All predicates used in :actions must exist in :predicates.\n  All predicates declared in :predicates must be used at least once in :actions. Predicates that are unused should be deleted or the domain should be updated to use them consistently.\n  Any predicates that should be true at the start of the story should be included in :init.\n  Constants used by the domain should be declared in the domain. For example: (:constants treasure ring - item)\n  All :actions should adhere to common sense logic.\n  Most characters should have intentions, and these intentions should be declared using the :intentionality syntax in the problem, e.g. (intends character (alive character))\n  All actions should have effects that are used by other actions, character intentions, or the :goal of the author. If actions do not have effects, the domain should be revised for better logical consistency.\n\nOutput a well-formed domain and problem that can be parsed and run by Glaive:"
            },
            {
                "role": "user",
                "content": "<|Story|>\n\nThe Nazis, in their holy quest for world domination, were looking for the Ark of the Covenant. They believed that it would grant them supernatural powers and help them win the war.\n\nThe U.S., with spies everywhere, got wind of this and turned to Indiana Jones, renowned professor of archaeology, who happened to know the location of the ark in Tanis.\n\nIndiana, after very little convincing, started his journey with the Army from the U.S. to Tanis. They quickly pinpointed the location of the ark (exactly where Indy had predicted), and began to dig. Nazi influence in that region was already quite strong, and it quickly got back through their network. Indiana, unearthing an ancient cask from an inconspicuous burial site, felt confident that the mission was nearly complete. He was casual in travelling back to the U.S. and didn't take the necessary precautions to avoid being followed.\n\nThe Nazis, with their own spies, were on the tarmac by the time he landed, out of place on American soil. They took the ark from him at gunpoint, and took it to a secret location. They opened it, and were immediately killed by the wrath of God. The ark was then taken by the Army, and stored in a warehouse, where it probably sits to this day (unless it was stolen by aliens)."
            },
            {
                "role": "assistant",
                "content": "<|Domain|>\n\n(define (domain indiana-jones-ark)\n  (:requirements :adl :domain-axioms :intentionality)\n  (:types character place - object weapon - item)\n  (:constants ark - item)\n  (:predicates\n    (open ark)\n    (alive ?character - character)\n    (armed ?character - character)\n    (buried ?item - item ?place - place)\n    (knows-location ?character - character ?item - item ?place - place)\n    (at ?character - character ?place - place)\n    (has ?character - character ?item - item)\n  )\n\n  ;; A character travels from one place to another.\n  (:action travel\n    :parameters\n      (?character - character ?from - place ?to - place)\n    :precondition\n      (and (not (= ?from ?to))\n      (alive ?character)\n      (at ?character ?from))\n    :effect  (and (not (at ?character ?from))\n      (at ?character ?to))\n    :agents  (?character)\n  )\n\n  ;; A character excavates an item.\n  (:action excavate\n    :parameters\n      (?character - character ?item - item ?place - place)\n    :precondition\n      (and (alive ?character)\n      (at ?character ?place)\n      (buried ?item ?place)\n      (knows-location ?character ?item ?place))\n    :effect\n      (and (not (buried ?item ?place))\n      (has ?character ?item))\n    :agents  (?character)\n  )\n\n  ;; One character gives an item to another.\n  (:action give\n    :parameters\n      (?giver - character ?item - item ?receiver - character ?place - place)\n    :precondition\n      (and (not (= ?giver ?receiver))\n      (alive ?giver)\n      (at ?giver ?place)\n      (has ?giver ?item)\n      (alive ?receiver)\n      (at ?receiver ?place))\n    :effect\n      (and (not (has ?giver ?item))\n      (has ?receiver ?item))\n    :agents\n      (?giver ?receiver)\n  )\n\n  ;; One character kills another.\n  (:action kill\n    :parameters\n      (?killer - character ?weapon - weapon ?victim - character ?place - place)\n    :precondition\n      (and (alive ?killer)\n      (at ?killer ?place)\n      (has ?killer ?weapon)\n      (alive ?victim)\n      (at ?victim ?place))\n    :effect\n      (not (alive ?victim))\n    :agents\n      (?killer)\n  )\n\n  ;; One character takes an item from another at weapon-point.\n  (:action take\n    :parameters\n      (?taker - character ?item - item ?victim - character ?place - place)\n    :precondition\n      (and (not (= ?taker ?victim))\n      (alive ?taker)\n      (at ?taker ?place)\n      (or (not (alive ?victim))\n      (and (armed ?taker)\n      (not (armed ?victim))))\n      (at ?victim ?place)\n      (has ?victim ?item))\n    :effect\n      (and (not (has ?victim ?item))\n      (has ?taker ?item))\n    :agents\n      (?taker)\n  )\n\n  ;; A character opens the Ark.\n  (:action open-ark\n    :parameters\n      (?character - character)\n    :precondition\n      (and (alive ?character)\n      (has ?character ark))\n    :effect\n      (and (open ark)\n      (not (alive ?character)))\n    :agents\n      (?character)\n  )\n\n  ;; The Ark closes.\n  (:action close-ark\n    :precondition\n      (open ark)\n    :effect\n      (not (open ark))\n  )\n\n  ;; When a character has a weapon, they are armed.\n  (:axiom\n    :vars\n      (?character - character)\n    :context\n      (and (not (armed ?character))\n      (exists (?w - weapon)\n      (has ?character ?w)))\n    :implies\n      (armed ?character)\n  )\n\n  ;; When a character does not have a weapon, they are unarmed.\n  (:axiom\n    :vars\n      (?character - character)\n    :context\n      (and (armed ?character)\n      (forall (?w - weapon)\n      (not (has ?character ?w))))\n    :implies\n      (not (armed ?character))\n  )\n)\n\n<|Problem|>\n\n(define (problem get-ark)\n  (:domain\n    indiana-jones-ark)\n  (:objects\n    indiana nazis army - character\n    usa tanis - place\n    gun - weapon)\n  (:init\n    (buried ark tanis)\n    (alive indiana)\n    (at indiana usa)\n    (knows-location indiana ark tanis)\n    (intends indiana (alive indiana))\n    (intends indiana (has army ark))\n    (alive army)\n    (at army usa)\n    (intends army (alive army))\n    (intends army (has army ark))\n    (alive nazis)\n    (at nazis tanis)\n    (intends nazis (alive nazis))\n    (intends nazis (open ark))\n    (has nazis gun))\n  (:goal\n    (and (at army usa)\n    (has army ark)\n    (not (alive nazis)))\n  )\n)"
            },
            {
                "role": "user",
                "content": "<|Story|>\nGrowing up, Cecil was one of those teenage boys with limbs so long that his brain signals would take a good half an hour to reach their intended target. Every adult that looked at him wore an expression of perpetual pity. As a twenty year old, he still had more elbows than sense, and so when the jar of tomato puree smashed across the kitchen tiles, he was less surprised and more resigned.\n\n\n\nOf course, this particular Sunday, he could have done without any unforeseen accidents. The little ring sat in a velvet box in his pocket. It cost enough to bring a wince even to a poker player's face. Blanche was coming to dinner, and Cecil had promised great things. Great things did not include glass and tomatoes spread across the kitchen in equal measure.\n\n\n\n\" Ah, \" Cecil said, as he cut his foot. \" That hurt. \" He hopped to the kitchen sink and recovered a washcloth. He knocked a chair while getting down on one knee. On the table sat four candles Cecil had found in a cupboard, secreted there in case of a blackout. One fell over and the white table cloth set on fire lazily, as though it couldn't make its mind up about about whether it wanted to blaze or simply singe.\n\n\nCecil mopped at the tomatoes on the floor, spreading them around hopelessly. On the stove, the pasta began to boil over, white froth and foam tipping onto the gas flame and threatening to put it out. The cloth succeeded in doing nothing except getting red sauce in places where previously the tiles had been clean. Pieces of glass crunched into Cecil's knee.\n\n\n\n\" Ah, \" he said again. \" Oh dear. I need some help. \"\n\n\n\n\nThe tomato sauce on the floor began to bubble. Strands of roiling pulp shifted around the floor like snakes. Cecil got to his feet quickly and reached for the recipe book. On the table, the white tablecloth finally succumbed and started to blaze merrily. Moving backwards, Cecil clutched at the spice rack for moral support and managed instead to scatter a mixture of parsley and oregano on the floor. The tomato mixture spat and hissed. The tiles of the kitchen cracked like hot fissures in the earth and steam leaked out like great curling tentacles.\n\n\n\n\" Who calls? \" Came a voice from the depths.\n\n\n\nCecil's knees were knocking.\n\n\n\n\" Er, I do, \" he said, as the tiles moved like tectonic plates to reveal a dark hole, darker than the deepest black of a goth's outfit. \" I 'm Cecil. \"\n\n\n\nThe pasta water behind him frothed and boiled, sending long waterfalls of white foam over the side of the silver pan. Overhead, the lights flickered like a cheap show at the amateur dramatics society. The tomato puree frowned at him.\n\n\n\n\" What do you want, Cecil? \" the voice said again. \" My great powers are at your service. \"\n\n\n\n\nThe white table cloth sent showers of black ash into the air. Two hands emerged from the hole. Veined, leathery, with long fingernails crusted with blood ( or tomato ) Cecil thought now would be a good time to have a heart attack, and wondered if Blanche would forgive him for escaping their afternoon meal.\n\n\n\n\n\" I don't suppose, \" he started. \" You know how to cook Italian food? \"\n\n\n\nThe hands scrabbled at the tiles, followed by long, black sleeves with raggedy edges. From the gloom of the hole in Cecil's kitchen came a small person, wearing a cow skull strapped across their forehead like a mask. They heaved themselves over the side and got to their feet and only then Cecil realised it was a woman. A wizened woman, with skin like an old boot and pursed lips. Grey hair hung in straggles under the cow's skull and she only had one eye. The other socket held nothing but a gleam of fire. She had hunched shoulders and the beginnings of a hump. On the hump sat a crow. The crow had three eyes, and one looked suspiciously like the one the woman missed.\n\n\n\n\" I 'm The Crone, \" the woman said. \" Of course I know how to fucking cook. Give me the spoon. \"\n\n\n\nAnd poor Cecil, not yet knowing how he was going to explain all this to Blanche, handed it over.\n\n\n\n-- -- --\n\n\n/r/Schoolgirlerror for other stories very similar to this one"
            }
        ],
        "plan_metadata": {
            "solution": null,
            "log": "The Glaive Narrative Planner, by Stephen G. Ware\nReading domain............ \njava.lang.RuntimeException: com.stephengware.java.planware.io.ParseException: The document \"Unable to parse domain\" could not be parsed as IntentionalDomain (at line 1).\n",
            "planned": false,
            "compiled": false,
            "reran_with_edit": false
        }
    }
}